# Чтение входных данных
n, m = map(int, input().split())  # Считываем размеры таблицы (n - строки, m - столбцы)
grid = [list(map(int, input().split())) for _ in range(n)]  # Считываем сами значения кислоты для каждой клетки

# Инициализация таблицы DP для хранения минимального урона на пути к каждой клетке
dp = [[0] * m for _ in range(n)]  # Создаем таблицу размером n x m, где все элементы изначально равны 0

# Начальная клетка (0, 0), она сама по себе является началом пути
dp[0][0] = grid[0][0]  # Начальный урон равен значению в первой клетке

# Заполнение первой строки (можно двигаться только вправо)
for j in range(1, m):
    dp[0][j] = dp[0][j-1] + grid[0][j]  # Каждый элемент - сумма предыдущего в строке и текущего урона

# Заполнение первого столбца (можно двигаться только вниз)
for i in range(1, n):
    dp[i][0] = dp[i-1][0] + grid[i][0]  # Каждый элемент - сумма предыдущего в столбце и текущего урона

# Заполнение оставшихся клеток (можно двигаться либо вправо, либо вниз)
for i in range(1, n):  # Перебираем строки
    for j in range(1, m):  # Перебираем столбцы
        dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]  # Для каждой клетки выбираем минимальный урон из двух возможных путей (слева или сверху) и прибавляем текущий урон на клетке

# Ответ - это минимальный урон, который мы получим, добравшись до правого нижнего угла
print(dp[n-1][m-1])  # Выводим минимальный урон для клетки в правом нижнем углу
