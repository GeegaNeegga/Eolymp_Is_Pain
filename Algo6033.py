# Функция для поиска в глубину (DFS)
def dfs(v, g, used):
    used[v] = True  # Отмечаем текущую точку как посещенную
    for to in g[v]:  # Проходим по всем соседям
        if not used[to]:  # Если сосед еще не посещен, вызываем DFS для этого соседа
            dfs(to, g, used)

# Основная часть программы
def main():
    # Читаем количество тестов
    tests = int(input())
    
    # Обрабатываем каждый тест
    for _ in range(tests):
        # Читаем количество магазинов
        n = int(input())
        
        # Считываем координаты всех точек (дом Джо, магазины и праздник)
        coordinates = []
        for _ in range(n + 2):
            x, y = map(int, input().split())  # Читаем пару координат
            coordinates.append((x, y))
        
        # Строим граф (список смежности)
        g = [[] for _ in range(n + 2)]  # Создаем список смежности для каждой вершины
        for i in range(n + 2):
            for j in range(i + 1, n + 2):
                # Проверяем, если расстояние между точками не превышает 1000 метров
                x1, y1 = coordinates[i]
                x2, y2 = coordinates[j]
                if abs(x1 - x2) + abs(y1 - y2) <= 1000:
                    g[i].append(j)  # Добавляем ребро между точками
                    g[j].append(i)  # Граф неориентированный
        
        # Массив для отслеживания посещенных точек
        used = [False] * (n + 2)
        
        # Запускаем DFS из дома Джо (точка 0)
        dfs(0, g, used)
        
        # Если точка n + 1 (праздник) достижима, выводим "happy", иначе "sad"
        if used[n + 1]:
            print("happy")
        else:
            print("sad")

# Запускаем основную программу
if __name__ == "__main__":
    main()
